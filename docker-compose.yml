services:
  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5432:5432"
    volumes:
      - postgres-auth-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-profile:
    image: postgres:15
    container_name: postgres-profile
    environment:
      POSTGRES_DB: profile_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5433:5432"
    volumes:
      - postgres-profile-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-order:
    image: postgres:15
    container_name: postgres-order
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5434:5432"
    volumes:
      - postgres-order-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-item:
    image: postgres:15
    container_name: postgres-item
    environment:
      POSTGRES_DB: item_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5435:5432"
    volumes:
      - postgres-item-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  postgres-cart:
    image: postgres:15
    container_name: postgres-cart
    environment:
      POSTGRES_DB: cart_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5436:5432"
    volumes:
      - postgres-cart-data:/var/lib/postgresql/data
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"  # PLAINTEXT (internal)
      - "9094:9094"   # PLAINTEXT_HOST (external)
    environment:
        KAFKA_ENABLE_KRAFT: "yes"
        KAFKA_CFG_PROCESS_ROLES: "controller,broker"
        KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
        KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:9094"
        KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094"
        KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        KAFKA_CFG_NODE_ID: "1"
        KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
        KAFKA_CLUSTER_ID: "ibsu-cluster-1"
        ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - kafka-data:/bitnami
    networks:
      - microservices-net

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - microservices-net
    command: [ "redis-server", "--notify-keyspace-events", "Ex" ]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - microservices-net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8088:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - microservices-net

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net


  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    deploy: # Add this section â†“
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

    depends_on:
      - postgres-auth
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net

  cart-service:
    build:
      context: .
      dockerfile: cart-service/Dockerfile
    container_name: cart-service
    ports:
      - "8086:8086"
    depends_on:
      - postgres-cart
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net

  eureka-server:
    build:
      context: .
      dockerfile: eureka-server/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net

  item-service:
    build:
      context: .
      dockerfile: item-service/Dockerfile
    container_name: item-service
    ports:
      - "8084:8084"
    depends_on:
      - postgres-item
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    depends_on:
      - postgres-order
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net

  profile-service:
    build:
      context: .
      dockerfile: profile-service/Dockerfile
    container_name: profile-service
    ports:
      - "8083:8083"
    depends_on:
      - postgres-profile
      - eureka-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - microservices-net


volumes:
  postgres-auth-data:
  postgres-profile-data:
  postgres-order-data:
  postgres-item-data:
  postgres-cart-data:
  kafka-data:

networks:
  microservices-net:
    external: true

